//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::Serialize;
use crate::user::entity::users;
use crate::user::entity::prelude::*;


#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "todos")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub user_id: Uuid,
    pub completed: bool,
    pub title: String,
    pub description: Option<String>,
    pub created_on: DateTime,
    pub updated_on: DateTime,
    pub deleted_on: Option<DateTime>,
    pub completed_on: Option<DateTime>,
    #[sea_orm(ignore)]
    pub user: users::Model,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
    belongs_to = "Users",
    from = "Column::UserId",
    to = "users::Column::Id",
    on_update = "NoAction",
    on_delete = "SetNull"
    )]
    Users,
}

impl Related<Users> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
